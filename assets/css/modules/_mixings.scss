/**
* GENERATE REPETITIVE CLASSES
*
* Description: This mixing is called to generate repetitive classes.
*
* @param {map} $map - Map variable where are hosted the keys and values to generate our classes.
* @param {string} $attribute - This is a string parameter with our property name *('color', 'background-color', 'padding', etc)*.
* @param {string} $separator ['base'] - This is a string parameter with our separator value.
*
* Map example:
*
* $colors: (
*   gray-1: $color-gray-1,
*   gray-2: $color-gray-2,
*   ...
* );
*
* Call example:
*
* .text-color {
*   @include generator($colors, 'color', $separator: ':');
* }
*
*
* Output example:
*
* .text-color-gray-1 {
*   color: #f9f9f9;
* }
*
* ...
*/

@mixin generator($map, $property, $prefix: '-', $separator: '-', $sufix: '') {
    @each $key, $value in $map {
        &#{$prefix}#{$key} {
            #{$property}:#{$value}#{$sufix};
        }
    }
}




/**
* GENERATE COLUMN CLASSES
*
* Description: This mixing is called to generate all the column classes.
*
* @param {string} $breakpoint - This is a string parameter with our breakpoint value *('xm', 'sm', 'ms', 'lg')*.
*/

@mixin columnsGenerator($breakpoint) {
    @for $column from 1 to $gridColumns+1 {
        .col-#{$breakpoint}-#{$column} {
            // flex-basis: (100% * $column) / $gridColumns;
            width: (100% * $column) / $gridColumns;
        }
    }
}




/**
* BREAKPOINTS GENERATOR
*
* Description: Creating our breakpoint mixings.
*/

    /**
    * SMALL (SM)
    */

    @mixin sm {
        @media (min-width: #{$screen-sm-min}) {
            @content;
        }
    }

    /**
    * MEDIUM (MD)
    */

    @mixin md {
        @media (min-width: #{$screen-md-min}) {
            @content;
        }
    }

    /**
    * LARGE (LG)
    */
    
    @mixin lg {
        @media (min-width: #{$screen-lg-min}) {
            @content;
        }
    }